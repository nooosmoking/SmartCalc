//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
// StyleAsCode exporter v1.2 - Style data exported as a values array            //
//                                                                              //
// USAGE: On init call: GuiLoadStyleStyle();                             //
//                                                                              //
// more info and bugs-report:  github.com/raysan5/raygui                        //
// feedback and support:       ray[at]raylibtech.com                            //
//                                                                              //
// Copyright (c) 2020-2022 raylib technologies (@raylibtech)                    //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

#define STYLE_STYLE_PROPS_COUNT  100

// Custom style name: style
static const GuiStyleProp styleStyleProps[STYLE_STYLE_PROPS_COUNT] = {
    { 0, 0, 0x1980d5ff },    // DEFAULT_BORDER_COLOR_NORMAL 
    { 0, 1, 0x4df3ebff },    // DEFAULT_BASE_COLOR_NORMAL 
    { 0, 2, 0x103e60ff },    // DEFAULT_TEXT_COLOR_NORMAL 
    { 0, 3, 0xe7e2f7ff },    // DEFAULT_BORDER_COLOR_FOCUSED 
    { 0, 4, 0x23d4ddff },    // DEFAULT_BASE_COLOR_FOCUSED 
    { 0, 5, 0xf1f1f1ff },    // DEFAULT_TEXT_COLOR_FOCUSED 
    { 0, 6, 0x6413a6ff },    // DEFAULT_BORDER_COLOR_PRESSED 
    { 0, 7, 0xea66d9ff },    // DEFAULT_BASE_COLOR_PRESSED 
    { 0, 8, 0x9f00bbff },    // DEFAULT_TEXT_COLOR_PRESSED 
    { 0, 9, 0x4b909eff },    // DEFAULT_BORDER_COLOR_DISABLED 
    { 0, 10, 0x73c7d0ff },    // DEFAULT_BASE_COLOR_DISABLED 
    { 0, 11, 0x448894ff },    // DEFAULT_TEXT_COLOR_DISABLED 
    { 0, 16, 100 },    // DEFAULT_TEXT_SIZE 
    { 0, 17, 0x00000000 },    // DEFAULT_TEXT_SPACING 
    { 0, 18, 0x1d3f6cff },    // DEFAULT_LINE_COLOR 
    { 0, 19, 0x29c9e5ff },    // DEFAULT_BACKGROUND_COLOR 
};

// WARNING: This style uses a custom font:  (size: 32, spacing: 0)

#define STYLE_COMPRESSED_DATA_SIZE 1615

// Font image pixels data compressed (DEFLATE)
// NOTE: Original pixel data simplified to GRAYSCALE
static unsigned char styleFontData[STYLE_COMPRESSED_DATA_SIZE] = { 0xed,
    0xdd, 0x3b, 0x8b, 0x5c, 0x65, 0x18, 0xc0, 0xf1, 0x27, 0x04, 0x6c, 0x2c, 0x53, 0x98, 0x80, 0xa0, 0x8d, 0x85, 0x5f, 0x20,
    0x60, 0x63, 0x84, 0xcd, 0x27, 0x98, 0x26, 0x22, 0x0a, 0xda, 0x58, 0xe7, 0x1b, 0xb8, 0xbd, 0xbd, 0x22, 0x58, 0x28, 0x6c,
    0x61, 0x61, 0x23, 0x58, 0x89, 0x82, 0x9d, 0xad, 0x48, 0x40, 0x8b, 0x14, 0x82, 0xa2, 0xf1, 0x03, 0xd8, 0xfa, 0xca, 0xcc,
    0x5e, 0xb2, 0xae, 0xd9, 0x39, 0xef, 0xed, 0x5c, 0x66, 0xe6, 0xf7, 0xfb, 0x13, 0xb2, 0xec, 0xec, 0x65, 0x66, 0x9e, 0xb9,
    0xed, 0x9e, 0xf7, 0x9c, 0x3d, 0xf9, 0xf2, 0x41, 0x9c, 0x7c, 0xfb, 0x20, 0xd6, 0xde, 0x8a, 0x88, 0x1b, 0x11, 0x91, 0x52,
    0x4a, 0x0f, 0xef, 0xac, 0xe2, 0xc7, 0x5b, 0xab, 0xcd, 0xdb, 0x2f, 0xaf, 0x4f, 0x3c, 0xbe, 0x7d, 0xff, 0xe8, 0xaf, 0xf5,
    0xa9, 0xcf, 0x1f, 0x45, 0x7c, 0x7a, 0x14, 0xf1, 0xe1, 0xd1, 0xaf, 0xb7, 0x57, 0x9b, 0x8f, 0x5f, 0xff, 0x8b, 0x37, 0x5e,
    0xba, 0xbf, 0xfe, 0xd8, 0xf5, 0x5b, 0x37, 0x23, 0xe2, 0x8b, 0xbb, 0xa7, 0x9f, 0xfb, 0xe4, 0xf1, 0xdb, 0xaf, 0x6f, 0xbe,
    0x78, 0x44, 0x9c, 0xdc, 0x5d, 0x6d, 0xfe, 0x7f, 0xe5, 0xeb, 0x8f, 0xbf, 0xfb, 0xf9, 0x97, 0x37, 0xef, 0xc5, 0xd9, 0xf7,
    0xfa, 0x6c, 0xfd, 0xfe, 0xef, 0xff, 0xfe, 0xfd, 0xbd, 0xcf, 0x3f, 0xda, 0xbc, 0xef, 0xd1, 0x4f, 0x37, 0xe2, 0xdd, 0x3b,
    0xab, 0x58, 0x7f, 0xdf, 0x27, 0x2f, 0xac, 0xce, 0x3e, 0xfb, 0xd6, 0xd1, 0xe9, 0xff, 0xc7, 0xf7, 0xce, 0xbf, 0xde, 0x8b,
    0x3f, 0x7c, 0x75, 0x74, 0xfe, 0x76, 0xc4, 0xc3, 0x8b, 0xb7, 0x3f, 0x78, 0x67, 0x75, 0xf1, 0x31, 0x67, 0xe7, 0x69, 0xe3,
    0xcf, 0x3f, 0xde, 0xbf, 0x77, 0xe3, 0xe9, 0x27, 0xc4, 0xa3, 0x57, 0x4f, 0xcf, 0xff, 0x85, 0xe3, 0x6f, 0x36, 0x5f, 0xe3,
    0xf1, 0xdd, 0x2b, 0xef, 0x3f, 0xbf, 0x8c, 0x57, 0x5c, 0xfe, 0xda, 0x57, 0x3f, 0x66, 0x7d, 0xda, 0xfa, 0xe4, 0x8c, 0xae,
    0xfb, 0xb8, 0xdc, 0xcf, 0x9f, 0xa6, 0x67, 0x9f, 0x9b, 0xf3, 0xf7, 0x96, 0x5d, 0x86, 0xb4, 0x80, 0xcb, 0x76, 0x7a, 0x0e,
    0xb6, 0x9d, 0x8f, 0xb4, 0xf5, 0x72, 0x3d, 0xfd, 0x57, 0x76, 0x8d, 0xec, 0xe6, 0xfc, 0x87, 0xce, 0x63, 0xc9, 0x65, 0x18,
    0x67, 0xfa, 0xa5, 0x5f, 0x73, 0xdb, 0xfc, 0xd3, 0xa5, 0xf9, 0xa6, 0x6b, 0xa6, 0x6f, 0xfe, 0x57, 0xaf, 0x8b, 0x92, 0xf9,
    0xc7, 0x1e, 0xcc, 0x3f, 0xb6, 0xcc, 0x2d, 0x15, 0x9c, 0xa3, 0xdd, 0x9e, 0x7f, 0xf9, 0x69, 0x97, 0x2d, 0xe7, 0xf9, 0xed,
    0xba, 0xf3, 0x38, 0xcd, 0x77, 0xcb, 0x7f, 0xaf, 0xa6, 0xbb, 0x0d, 0xcc, 0xf9, 0xbd, 0x4c, 0xff, 0x90, 0xe6, 0x2f, 0xcd,
    0xde, 0x6b, 0xbf, 0xa5, 0x9b, 0xae, 0x05, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x0b, 0xd8, 0x36, 0x57, 0x76, 0xea,
    0xf6, 0xad, 0x8e, 0xc3, 0xa7, 0x94, 0x7e, 0xde, 0xd0, 0xd7, 0x2c, 0xdb, 0xda, 0xbb, 0xfd, 0x12, 0x95, 0x6e, 0x39, 0xce,
    0xb9, 0x06, 0xa3, 0xf8, 0xd4, 0xa1, 0xed, 0xba, 0x29, 0xeb, 0x5a, 0xce, 0xdd, 0x12, 0x5d, 0x7a, 0xad, 0xe7, 0x6c, 0xa5,
    0xae, 0xd9, 0x92, 0xdd, 0x72, 0x5a, 0xee, 0x0a, 0x8b, 0xd4, 0x79, 0xc5, 0x46, 0xda, 0xba, 0x36, 0x6b, 0x68, 0x6d, 0x43,
    0x0c, 0xde, 0xaa, 0xb7, 0x5f, 0xbe, 0x34, 0xe2, 0xaa, 0x99, 0xeb, 0xcf, 0x5f, 0xed, 0x0a, 0x86, 0x31, 0xe6, 0xdf, 0x6f,
    0xdd, 0x45, 0x6a, 0xb8, 0x5c, 0x69, 0x60, 0xab, 0x73, 0x1a, 0x65, 0xc2, 0x43, 0xe7, 0xa5, 0x6d, 0xd5, 0xcc, 0x58, 0xf3,
    0x2f, 0x5f, 0xfd, 0xd8, 0x63, 0xfe, 0x69, 0xd4, 0xad, 0xd8, 0xd7, 0xcf, 0x3f, 0x2d, 0x7c, 0xfe, 0x69, 0x60, 0xcd, 0x54,
    0xd9, 0xb3, 0x65, 0xcb, 0x3d, 0x69, 0xf8, 0x39, 0xbe, 0xed, 0xf1, 0x7f, 0xdc, 0x47, 0x8f, 0xed, 0xeb, 0x5a, 0x6b, 0x26,
    0x5c, 0xf6, 0x9a, 0xa7, 0xf7, 0xfd, 0x7f, 0x8c, 0xe7, 0xf1, 0xfa, 0xd5, 0xcf, 0x65, 0xaf, 0xcf, 0xa6, 0x7b, 0xfe, 0x8f,
    0xcc, 0x75, 0xcd, 0xbb, 0xf7, 0xf8, 0xbf, 0xac, 0xf9, 0x47, 0xf1, 0x2b, 0x9a, 0x5e, 0xab, 0x5b, 0x6b, 0x9f, 0xcf, 0x72,
    0xe6, 0x9f, 0x73, 0xab, 0x9e, 0x73, 0xfe, 0x35, 0x8f, 0xe4, 0x75, 0x7b, 0x31, 0xf4, 0x9d, 0xff, 0x32, 0x56, 0x9b, 0x2d,
    0xff, 0xfe, 0x3f, 0xf5, 0xcf, 0x6a, 0xb5, 0xf3, 0xef, 0xf3, 0xfa, 0x7f, 0xfa, 0xfd, 0x39, 0xae, 0xdf, 0xb3, 0xa1, 0xd7,
    0xfc, 0x5b, 0xaf, 0xad, 0xe1, 0xdf, 0x14, 0xf4, 0xfc, 0x5d, 0xcd, 0xf0, 0xf3, 0x42, 0xdd, 0xd7, 0x5c, 0xf2, 0xfc, 0xeb,
    0xee, 0xa5, 0xd3, 0xfc, 0xfe, 0x47, 0x53, 0xad, 0x7a, 0x36, 0x0b, 0xbf, 0x5f, 0x97, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92,
    0x24, 0x49, 0x9a, 0x6e, 0xeb, 0xc4, 0xf0, 0x2a, 0xff, 0x54, 0xb1, 0x0d, 0xb2, 0xd7, 0xfa, 0xac, 0xfa, 0xb5, 0x10, 0xe9,
    0xca, 0x1a, 0xdc, 0x54, 0xbc, 0x56, 0x22, 0x55, 0xef, 0xcd, 0x30, 0xcf, 0xe7, 0x96, 0xaf, 0xfd, 0x6c, 0x3f, 0xb5, 0xe7,
    0xcc, 0xca, 0xd7, 0x33, 0xe4, 0xee, 0x5f, 0x91, 0x46, 0x5b, 0x67, 0x31, 0xf5, 0xa9, 0x79, 0xef, 0x9f, 0x6e, 0xfe, 0x31,
    0xd1, 0xfd, 0xbf, 0x76, 0xfe, 0x69, 0x70, 0x4f, 0xa6, 0xe5, 0xce, 0xbf, 0x66, 0x0d, 0xf5, 0x7e, 0xce, 0xbf, 0xe6, 0xc8,
    0x9e, 0x97, 0x67, 0x1f, 0x3b, 0x36, 0xff, 0x34, 0xd1, 0xfc, 0x5b, 0xf6, 0xd6, 0x8b, 0xca, 0xd7, 0x0e, 0xd3, 0xce, 0x3f,
    0x06, 0x27, 0x9c, 0x1a, 0xa6, 0x54, 0xff, 0x0a, 0xa8, 0x65, 0xbd, 0xdb, 0x92, 0xee, 0xff, 0x53, 0x3c, 0xff, 0xa7, 0xa6,
    0xf9, 0xc7, 0x68, 0xf3, 0x6f, 0xbd, 0x7e, 0xea, 0x56, 0x43, 0x1e, 0xe2, 0xfc, 0x6b, 0x9f, 0xff, 0xf3, 0x5f, 0x5b, 0x2c,
    0x6b, 0xfe, 0x39, 0xfb, 0x66, 0x1d, 0xce, 0xfc, 0x63, 0x4f, 0xe7, 0x5f, 0xbf, 0x6f, 0xd1, 0xbe, 0xcd, 0x3f, 0x8d, 0xf0,
    0x28, 0xdc, 0xfa, 0xf3, 0xff, 0x5c, 0xf3, 0x9f, 0xf2, 0xe7, 0xbf, 0xf6, 0x23, 0x1f, 0xf4, 0xfa, 0xfd, 0x4f, 0xff, 0x57,
    0x52, 0xe3, 0xff, 0xfe, 0x67, 0x9c, 0xeb, 0x67, 0x78, 0x0d, 0xff, 0xf0, 0xeb, 0x06, 0x6b, 0x8e, 0x97, 0xbd, 0x77, 0x88,
    0xdc, 0x02, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0xc6, 0xdb, 0x32, 0x31, 0xb4, 0xf5, 0xb4, 0xef, 0x51,
    0xe8, 0xf2, 0xf6, 0x3b, 0x28, 0xd9, 0xe6, 0x5d, 0xb3, 0x9d, 0xbc, 0x76, 0x7d, 0x62, 0xed, 0x31, 0x79, 0x7b, 0x1f, 0x67,
    0x2f, 0xba, 0x1d, 0xff, 0x7f, 0xea, 0xf9, 0xe7, 0x6e, 0x93, 0xaf, 0x5d, 0xe9, 0x91, 0x7f, 0xad, 0x97, 0x7e, 0xbd, 0xb6,
    0x75, 0x28, 0x7d, 0x8f, 0xa5, 0x5a, 0x7f, 0x1c, 0xdd, 0x92, 0x09, 0x0e, 0xaf, 0xbd, 0xeb, 0x7d, 0x3c, 0xdf, 0x5e, 0xf3,
    0x6f, 0x3b, 0x6a, 0x68, 0x8f, 0xe3, 0x50, 0x47, 0xe3, 0x5a, 0x2c, 0xf3, 0x6f, 0x3f, 0x65, 0x8c, 0xe7, 0xcb, 0x9a, 0x63,
    0xe2, 0xd7, 0xac, 0x13, 0x6a, 0x79, 0x96, 0x9c, 0x62, 0xfe, 0x51, 0xf5, 0xd7, 0x83, 0xea, 0xef, 0xe7, 0x4b, 0x9f, 0x7f,
    0xef, 0xe7, 0x86, 0xda, 0x57, 0x0c, 0xf9, 0xd7, 0x48, 0xee, 0xbd, 0xbb, 0x66, 0xfe, 0xb5, 0x8f, 0x89, 0xfb, 0x3b, 0xff,
    0xbe, 0xc7, 0xd2, 0xae, 0xd9, 0x77, 0xb4, 0xef, 0xfc, 0xb7, 0xdf, 0x36, 0xf6, 0x6f, 0xfe, 0x39, 0xcf, 0xff, 0x35, 0x7f,
    0x13, 0x2d, 0xaa, 0x8f, 0xb3, 0xdd, 0xba, 0xea, 0x6c, 0xae, 0xf9, 0xf7, 0x7e, 0xd4, 0x98, 0x7f, 0x8d, 0x5d, 0xed, 0xab,
    0xcd, 0xfa, 0x57, 0xa9, 0x3d, 0x1e, 0xff, 0x73, 0xff, 0xfe, 0xcf, 0x58, 0xab, 0xd4, 0xcd, 0xbf, 0xf7, 0xfc, 0x4b, 0x7f,
    0xea, 0x4d, 0x0d, 0x7f, 0xdd, 0xae, 0x65, 0xfe, 0x7d, 0x7f, 0x92, 0x5a, 0xc6, 0xfc, 0xeb, 0x7e, 0xdb, 0x50, 0xfb, 0x99,
    0xfb, 0xba, 0xae, 0xb8, 0xf6, 0x3a, 0xf4, 0xfb, 0xdc, 0xfd, 0x3a, 0x2a, 0xcd, 0x58, 0x1f, 0x2f, 0x49, 0x92, 0x24, 0x49,
    0x92, 0x24, 0x49, 0x92, 0x74, 0x08, 0xeb, 0xff, 0x5b, 0xd7, 0x6e, 0xe4, 0x1e, 0x85, 0xfd, 0xff, 0xef, 0xad, 0xfb, 0x2b,
    0xe6, 0xa9, 0xf1, 0xf3, 0x52, 0xf1, 0x4a, 0x98, 0xb2, 0x2d, 0xcf, 0x3d, 0x56, 0x0a, 0xf6, 0x5d, 0x2d, 0x36, 0xdf, 0xfc,
    0xeb, 0x56, 0x97, 0xce, 0xb1, 0xd6, 0xae, 0x76, 0x85, 0x56, 0xef, 0xf9, 0xf7, 0xbf, 0x56, 0xc6, 0xde, 0x6a, 0xbe, 0x1f,
    0xf3, 0x8f, 0x6e, 0x6b, 0x5c, 0xc7, 0x9a, 0x7f, 0xfd, 0xed, 0xb4, 0x74, 0xe5, 0xc9, 0xd8, 0xc7, 0xe8, 0xdd, 0x9d, 0xf9,
    0xe7, 0x3c, 0xdb, 0x4c, 0x37, 0xff, 0xe1, 0xf7, 0x97, 0xdf, 0xff, 0xe7, 0x38, 0x46, 0xff, 0x2e, 0xcd, 0x3f, 0xb2, 0x8e,
    0x4e, 0xbb, 0x9b, 0xf7, 0xff, 0xe8, 0x7a, 0x8c, 0xfe, 0x65, 0x3c, 0xfe, 0xd7, 0xbf, 0xfe, 0x8b, 0x09, 0x9e, 0xff, 0xe3,
    0x3f, 0x7f, 0x95, 0xa2, 0xdf, 0xb5, 0x52, 0xbe, 0x92, 0xb0, 0xf7, 0xfc, 0xa7, 0x7a, 0xfe, 0x8f, 0x86, 0xa3, 0x32, 0xf7,
    0x7d, 0xfc, 0xaf, 0xdd, 0x0b, 0xa3, 0xf5, 0xd6, 0xd6, 0xba, 0xb7, 0xe1, 0xfc, 0xf7, 0xff, 0x39, 0x57, 0x8f, 0xf6, 0x3c,
    0x3f, 0xcb, 0x59, 0x79, 0xb8, 0x5b, 0xcf, 0xff, 0xe6, 0xbf, 0x8c, 0x95, 0xb3, 0x31, 0xf3, 0xdf, 0xe8, 0x38, 0xcc, 0xf5,
    0xea, 0xbb, 0x7c, 0x49, 0xad, 0xb5, 0x3e, 0xf4, 0xb5, 0xf9, 0xae, 0x07, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92,
    0xa4, 0x25, 0x6f, 0xcd, 0x49, 0x85, 0x47, 0x77, 0x2d, 0x5d, 0xff, 0x93, 0x2e, 0x6d, 0x1d, 0x76, 0x9d, 0xef, 0xce, 0x16,
    0xec, 0x3e, 0x47, 0x75, 0x4c, 0x83, 0xb7, 0x32, 0x2d, 0x73, 0xfd, 0x42, 0xaf, 0xf9, 0x1f, 0xda, 0x2a, 0x89, 0x7d, 0x59,
    0xbd, 0xd2, 0xf7, 0xa8, 0xae, 0xda, 0x97, 0x3d, 0x00, 0xcd, 0xdf, 0xfe, 0x9f, 0x87, 0xbe, 0x12, 0xee, 0x10, 0x5e, 0xff,
    0xbb, 0xff, 0xbb, 0x75, 0x98, 0xbf, 0xf9, 0x9b, 0xbf, 0xf9, 0x9b, 0xbf, 0xf9, 0x9b, 0xbf, 0xd5, 0xfe, 0x75, 0xfb, 0x7f,
    0x4a, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92,
    0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49,
    0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24,
    0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92,
    0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0xa4, 0x9d, 0x6b, 0xed, 0x93, 0xe7, 0xfe, 0xb9, 0xb9, 0x79, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xf2, 0x2f };

// Font characters rectangles data
static const Rectangle styleFontRecs[95] = {
    { 4, 4, 4 , 16 },
    { 16, 4, 2 , 10 },
    { 26, 4, 5 , 3 },
    { 39, 4, 7 , 10 },
    { 54, 4, 7 , 13 },
    { 69, 4, 7 , 10 },
    { 84, 4, 7 , 10 },
    { 99, 4, 2 , 3 },
    { 109, 4, 3 , 12 },
    { 120, 4, 3 , 12 },
    { 131, 4, 5 , 6 },
    { 144, 4, 6 , 5 },
    { 158, 4, 2 , 4 },
    { 168, 4, 5 , 1 },
    { 181, 4, 2 , 2 },
    { 191, 4, 4 , 10 },
    { 203, 4, 6 , 10 },
    { 217, 4, 4 , 10 },
    { 229, 4, 6 , 10 },
    { 4, 28, 6 , 10 },
    { 18, 28, 6 , 10 },
    { 32, 28, 6 , 10 },
    { 46, 28, 6 , 10 },
    { 60, 28, 6 , 10 },
    { 74, 28, 6 , 10 },
    { 88, 28, 6 , 10 },
    { 102, 28, 2 , 6 },
    { 112, 28, 2 , 8 },
    { 122, 28, 7 , 7 },
    { 137, 28, 5 , 3 },
    { 150, 28, 7 , 7 },
    { 165, 28, 6 , 10 },
    { 179, 28, 7 , 12 },
    { 194, 28, 7 , 10 },
    { 209, 28, 7 , 10 },
    { 224, 28, 7 , 10 },
    { 239, 28, 7 , 10 },
    { 4, 52, 7 , 10 },
    { 19, 52, 7 , 10 },
    { 34, 52, 7 , 10 },
    { 49, 52, 7 , 10 },
    { 64, 52, 2 , 10 },
    { 74, 52, 5 , 10 },
    { 87, 52, 7 , 10 },
    { 102, 52, 6 , 10 },
    { 116, 52, 9 , 10 },
    { 133, 52, 7 , 10 },
    { 148, 52, 7 , 10 },
    { 163, 52, 7 , 10 },
    { 178, 52, 7 , 12 },
    { 193, 52, 7 , 10 },
    { 208, 52, 7 , 10 },
    { 223, 52, 6 , 10 },
    { 237, 52, 7 , 10 },
    { 4, 76, 7 , 10 },
    { 19, 76, 8 , 10 },
    { 35, 76, 7 , 10 },
    { 50, 76, 6 , 10 },
    { 64, 76, 7 , 10 },
    { 79, 76, 4 , 12 },
    { 91, 76, 4 , 10 },
    { 103, 76, 4 , 12 },
    { 115, 76, 6 , 3 },
    { 129, 76, 7 , 1 },
    { 144, 76, 4 , 3 },
    { 156, 76, 6 , 7 },
    { 170, 76, 6 , 10 },
    { 184, 76, 6 , 7 },
    { 198, 76, 6 , 10 },
    { 212, 76, 6 , 7 },
    { 226, 76, 4 , 10 },
    { 238, 76, 6 , 9 },
    { 4, 100, 6 , 10 },
    { 18, 100, 2 , 10 },
    { 28, 100, 5 , 12 },
    { 41, 100, 6 , 10 },
    { 55, 100, 3 , 10 },
    { 66, 100, 8 , 7 },
    { 82, 100, 6 , 7 },
    { 96, 100, 6 , 7 },
    { 110, 100, 6 , 9 },
    { 124, 100, 6 , 9 },
    { 138, 100, 5 , 7 },
    { 151, 100, 6 , 7 },
    { 165, 100, 4 , 10 },
    { 177, 100, 6 , 7 },
    { 191, 100, 6 , 7 },
    { 205, 100, 8 , 7 },
    { 221, 100, 6 , 7 },
    { 235, 100, 6 , 9 },
    { 4, 124, 6 , 7 },
    { 18, 124, 5 , 12 },
    { 31, 124, 2 , 12 },
    { 41, 124, 5 , 12 },
    { 54, 124, 7 , 3 },
};

// Font glyphs info data
// NOTE: No glyphs.image data provided
static const GlyphInfo styleFontChars[95] = {
    { 32, 0, 12, 4, { 0 }},
    { 33, 0, 2, 3, { 0 }},
    { 34, 0, 2, 6, { 0 }},
    { 35, 0, 2, 8, { 0 }},
    { 36, 0, 1, 8, { 0 }},
    { 37, 0, 2, 8, { 0 }},
    { 38, 0, 2, 8, { 0 }},
    { 39, 0, 2, 3, { 0 }},
    { 40, 0, 2, 4, { 0 }},
    { 41, 0, 2, 4, { 0 }},
    { 42, 0, 4, 6, { 0 }},
    { 43, 0, 6, 7, { 0 }},
    { 44, 0, 10, 3, { 0 }},
    { 45, 0, 8, 6, { 0 }},
    { 46, 0, 10, 3, { 0 }},
    { 47, 0, 2, 5, { 0 }},
    { 48, 0, 2, 7, { 0 }},
    { 49, 0, 2, 7, { 0 }},
    { 50, 0, 2, 7, { 0 }},
    { 51, 0, 2, 7, { 0 }},
    { 52, 0, 2, 7, { 0 }},
    { 53, 0, 2, 7, { 0 }},
    { 54, 0, 2, 7, { 0 }},
    { 55, 0, 2, 7, { 0 }},
    { 56, 0, 2, 7, { 0 }},
    { 57, 0, 2, 7, { 0 }},
    { 58, 0, 4, 3, { 0 }},
    { 59, 0, 4, 3, { 0 }},
    { 60, 0, 4, 8, { 0 }},
    { 61, 0, 6, 6, { 0 }},
    { 62, 0, 4, 8, { 0 }},
    { 63, 0, 2, 7, { 0 }},
    { 64, 0, 2, 8, { 0 }},
    { 65, 0, 2, 8, { 0 }},
    { 66, 0, 2, 8, { 0 }},
    { 67, 0, 2, 8, { 0 }},
    { 68, 0, 2, 8, { 0 }},
    { 69, 0, 2, 8, { 0 }},
    { 70, 0, 2, 8, { 0 }},
    { 71, 0, 2, 8, { 0 }},
    { 72, 0, 2, 8, { 0 }},
    { 73, 0, 2, 3, { 0 }},
    { 74, 0, 2, 6, { 0 }},
    { 75, 0, 2, 8, { 0 }},
    { 76, 0, 2, 7, { 0 }},
    { 77, 0, 2, 10, { 0 }},
    { 78, 0, 2, 8, { 0 }},
    { 79, 0, 2, 8, { 0 }},
    { 80, 0, 2, 8, { 0 }},
    { 81, 0, 2, 8, { 0 }},
    { 82, 0, 2, 8, { 0 }},
    { 83, 0, 2, 8, { 0 }},
    { 84, 0, 2, 7, { 0 }},
    { 85, 0, 2, 8, { 0 }},
    { 86, 0, 2, 8, { 0 }},
    { 87, 0, 2, 9, { 0 }},
    { 88, 0, 2, 8, { 0 }},
    { 89, 0, 2, 7, { 0 }},
    { 90, 0, 2, 8, { 0 }},
    { 91, 0, 2, 5, { 0 }},
    { 92, 0, 2, 5, { 0 }},
    { 93, 0, 2, 5, { 0 }},
    { 94, 0, 2, 7, { 0 }},
    { 95, 0, 14, 8, { 0 }},
    { 96, 0, 2, 5, { 0 }},
    { 97, 0, 5, 7, { 0 }},
    { 98, 0, 2, 7, { 0 }},
    { 99, 0, 5, 7, { 0 }},
    { 100, 0, 2, 7, { 0 }},
    { 101, 0, 5, 7, { 0 }},
    { 102, 0, 2, 5, { 0 }},
    { 103, 0, 5, 7, { 0 }},
    { 104, 0, 2, 7, { 0 }},
    { 105, 0, 2, 3, { 0 }},
    { 106, 0, 2, 6, { 0 }},
    { 107, 0, 2, 7, { 0 }},
    { 108, 0, 2, 4, { 0 }},
    { 109, 0, 5, 9, { 0 }},
    { 110, 0, 5, 7, { 0 }},
    { 111, 0, 5, 7, { 0 }},
    { 112, 0, 5, 7, { 0 }},
    { 113, 0, 5, 7, { 0 }},
    { 114, 0, 5, 6, { 0 }},
    { 115, 0, 5, 7, { 0 }},
    { 116, 0, 2, 5, { 0 }},
    { 117, 0, 5, 7, { 0 }},
    { 118, 0, 5, 7, { 0 }},
    { 119, 0, 5, 9, { 0 }},
    { 120, 0, 5, 7, { 0 }},
    { 121, 0, 5, 7, { 0 }},
    { 122, 0, 5, 7, { 0 }},
    { 123, 0, 2, 6, { 0 }},
    { 124, 0, 2, 3, { 0 }},
    { 125, 0, 2, 6, { 0 }},
    { 126, 0, 6, 8, { 0 }},
};

// Style loading function: style
static void GuiLoadStyleStyle(void)
{
    // Load style properties provided
    // NOTE: Default properties are propagated
    for (int i = 0; i < STYLE_STYLE_PROPS_COUNT; i++)
    {
        GuiSetStyle(styleStyleProps[i].controlId, styleStyleProps[i].propertyId, styleStyleProps[i].propertyValue);
    }

    // Custom font loading
    // NOTE: Compressed font image data (DEFLATE), it requires DecompressData() function
    int styleFontDataSize = 0;
    unsigned char *data = DecompressData(styleFontData, STYLE_COMPRESSED_DATA_SIZE, &styleFontDataSize);
    Image imFont = { data, 256, 256, 1, 7 };

    Font font = { 0 };
    font.baseSize = 32;
    font.glyphCount = 95;

    // Load texture from image
    font.texture = LoadTextureFromImage(imFont);
    UnloadImage(imFont);  // Uncompressed data can be unloaded from memory

    // Copy char recs data from global fontRecs
    // NOTE: Required to avoid issues if trying to free font
    font.recs = (Rectangle *)malloc(font.glyphCount*sizeof(Rectangle));
    memcpy(font.recs, styleFontRecs, font.glyphCount*sizeof(Rectangle));

    // Copy font char info data from global fontChars
    // NOTE: Required to avoid issues if trying to free font
    font.glyphs = (GlyphInfo *)malloc(font.glyphCount*sizeof(GlyphInfo));
    memcpy(font.glyphs, styleFontChars, font.glyphCount*sizeof(GlyphInfo));

    GuiSetFont(font);

    // TODO: Setup a white rectangle on the font to be used on shapes drawing,
    // this way we make sure all gui can be drawn on a single pass because no texture change is required
    // NOTE: Setting up this rectangle is a manual process (for the moment)
    //Rectangle whiteChar = { 0, 0, 0, 0 };
    //SetShapesTexture(font.texture, whiteChar);

    //-----------------------------------------------------------------

    // TODO: Custom user style setup: Set specific properties here (if required)
    // i.e. Controls specific BORDER_WIDTH, TEXT_PADDING, TEXT_ALIGNMENT
}
